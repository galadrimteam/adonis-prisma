
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AccessToken` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model AccessToken
 * 
 */
export type AccessTokenModel = runtime.Types.Result.DefaultSelection<Prisma.$AccessTokenPayload>

export type AggregateAccessToken = {
  _count: AccessTokenCountAggregateOutputType | null
  _min: AccessTokenMinAggregateOutputType | null
  _max: AccessTokenMaxAggregateOutputType | null
}

export type AccessTokenMinAggregateOutputType = {
  id: string | null
  userId: string | null
  hash: string | null
  createdAt: Date | null
  updatedAt: Date | null
  expiresAt: Date | null
  lastUsedAt: Date | null
}

export type AccessTokenMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  hash: string | null
  createdAt: Date | null
  updatedAt: Date | null
  expiresAt: Date | null
  lastUsedAt: Date | null
}

export type AccessTokenCountAggregateOutputType = {
  id: number
  userId: number
  hash: number
  createdAt: number
  updatedAt: number
  expiresAt: number
  lastUsedAt: number
  _all: number
}


export type AccessTokenMinAggregateInputType = {
  id?: true
  userId?: true
  hash?: true
  createdAt?: true
  updatedAt?: true
  expiresAt?: true
  lastUsedAt?: true
}

export type AccessTokenMaxAggregateInputType = {
  id?: true
  userId?: true
  hash?: true
  createdAt?: true
  updatedAt?: true
  expiresAt?: true
  lastUsedAt?: true
}

export type AccessTokenCountAggregateInputType = {
  id?: true
  userId?: true
  hash?: true
  createdAt?: true
  updatedAt?: true
  expiresAt?: true
  lastUsedAt?: true
  _all?: true
}

export type AccessTokenAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AccessToken to aggregate.
   */
  where?: Prisma.AccessTokenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccessTokens to fetch.
   */
  orderBy?: Prisma.AccessTokenOrderByWithRelationInput | Prisma.AccessTokenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AccessTokenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccessTokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccessTokens.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AccessTokens
  **/
  _count?: true | AccessTokenCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AccessTokenMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AccessTokenMaxAggregateInputType
}

export type GetAccessTokenAggregateType<T extends AccessTokenAggregateArgs> = {
      [P in keyof T & keyof AggregateAccessToken]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAccessToken[P]>
    : Prisma.GetScalarType<T[P], AggregateAccessToken[P]>
}




export type AccessTokenGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AccessTokenWhereInput
  orderBy?: Prisma.AccessTokenOrderByWithAggregationInput | Prisma.AccessTokenOrderByWithAggregationInput[]
  by: Prisma.AccessTokenScalarFieldEnum[] | Prisma.AccessTokenScalarFieldEnum
  having?: Prisma.AccessTokenScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AccessTokenCountAggregateInputType | true
  _min?: AccessTokenMinAggregateInputType
  _max?: AccessTokenMaxAggregateInputType
}

export type AccessTokenGroupByOutputType = {
  id: string
  userId: string
  hash: string
  createdAt: Date
  updatedAt: Date
  expiresAt: Date | null
  lastUsedAt: Date | null
  _count: AccessTokenCountAggregateOutputType | null
  _min: AccessTokenMinAggregateOutputType | null
  _max: AccessTokenMaxAggregateOutputType | null
}

type GetAccessTokenGroupByPayload<T extends AccessTokenGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AccessTokenGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AccessTokenGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AccessTokenGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AccessTokenGroupByOutputType[P]>
      }
    >
  > 



export type AccessTokenWhereInput = {
  AND?: Prisma.AccessTokenWhereInput | Prisma.AccessTokenWhereInput[]
  OR?: Prisma.AccessTokenWhereInput[]
  NOT?: Prisma.AccessTokenWhereInput | Prisma.AccessTokenWhereInput[]
  id?: Prisma.StringFilter<"AccessToken"> | string
  userId?: Prisma.StringFilter<"AccessToken"> | string
  hash?: Prisma.StringFilter<"AccessToken"> | string
  createdAt?: Prisma.DateTimeFilter<"AccessToken"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AccessToken"> | Date | string
  expiresAt?: Prisma.DateTimeNullableFilter<"AccessToken"> | Date | string | null
  lastUsedAt?: Prisma.DateTimeNullableFilter<"AccessToken"> | Date | string | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type AccessTokenOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  hash?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrderInput | Prisma.SortOrder
  lastUsedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type AccessTokenWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  hash?: string
  AND?: Prisma.AccessTokenWhereInput | Prisma.AccessTokenWhereInput[]
  OR?: Prisma.AccessTokenWhereInput[]
  NOT?: Prisma.AccessTokenWhereInput | Prisma.AccessTokenWhereInput[]
  userId?: Prisma.StringFilter<"AccessToken"> | string
  createdAt?: Prisma.DateTimeFilter<"AccessToken"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AccessToken"> | Date | string
  expiresAt?: Prisma.DateTimeNullableFilter<"AccessToken"> | Date | string | null
  lastUsedAt?: Prisma.DateTimeNullableFilter<"AccessToken"> | Date | string | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "hash">

export type AccessTokenOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  hash?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrderInput | Prisma.SortOrder
  lastUsedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.AccessTokenCountOrderByAggregateInput
  _max?: Prisma.AccessTokenMaxOrderByAggregateInput
  _min?: Prisma.AccessTokenMinOrderByAggregateInput
}

export type AccessTokenScalarWhereWithAggregatesInput = {
  AND?: Prisma.AccessTokenScalarWhereWithAggregatesInput | Prisma.AccessTokenScalarWhereWithAggregatesInput[]
  OR?: Prisma.AccessTokenScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AccessTokenScalarWhereWithAggregatesInput | Prisma.AccessTokenScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"AccessToken"> | string
  userId?: Prisma.StringWithAggregatesFilter<"AccessToken"> | string
  hash?: Prisma.StringWithAggregatesFilter<"AccessToken"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AccessToken"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"AccessToken"> | Date | string
  expiresAt?: Prisma.DateTimeNullableWithAggregatesFilter<"AccessToken"> | Date | string | null
  lastUsedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"AccessToken"> | Date | string | null
}

export type AccessTokenCreateInput = {
  id?: string
  hash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  expiresAt?: Date | string | null
  lastUsedAt?: Date | string | null
  user: Prisma.UserCreateNestedOneWithoutRememberMeTokensInput
}

export type AccessTokenUncheckedCreateInput = {
  id?: string
  userId: string
  hash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  expiresAt?: Date | string | null
  lastUsedAt?: Date | string | null
}

export type AccessTokenUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  lastUsedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutRememberMeTokensNestedInput
}

export type AccessTokenUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  lastUsedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AccessTokenCreateManyInput = {
  id?: string
  userId: string
  hash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  expiresAt?: Date | string | null
  lastUsedAt?: Date | string | null
}

export type AccessTokenUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  lastUsedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AccessTokenUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  lastUsedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AccessTokenListRelationFilter = {
  every?: Prisma.AccessTokenWhereInput
  some?: Prisma.AccessTokenWhereInput
  none?: Prisma.AccessTokenWhereInput
}

export type AccessTokenOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AccessTokenCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  hash?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  lastUsedAt?: Prisma.SortOrder
}

export type AccessTokenMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  hash?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  lastUsedAt?: Prisma.SortOrder
}

export type AccessTokenMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  hash?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  lastUsedAt?: Prisma.SortOrder
}

export type AccessTokenCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AccessTokenCreateWithoutUserInput, Prisma.AccessTokenUncheckedCreateWithoutUserInput> | Prisma.AccessTokenCreateWithoutUserInput[] | Prisma.AccessTokenUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AccessTokenCreateOrConnectWithoutUserInput | Prisma.AccessTokenCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AccessTokenCreateManyUserInputEnvelope
  connect?: Prisma.AccessTokenWhereUniqueInput | Prisma.AccessTokenWhereUniqueInput[]
}

export type AccessTokenUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AccessTokenCreateWithoutUserInput, Prisma.AccessTokenUncheckedCreateWithoutUserInput> | Prisma.AccessTokenCreateWithoutUserInput[] | Prisma.AccessTokenUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AccessTokenCreateOrConnectWithoutUserInput | Prisma.AccessTokenCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AccessTokenCreateManyUserInputEnvelope
  connect?: Prisma.AccessTokenWhereUniqueInput | Prisma.AccessTokenWhereUniqueInput[]
}

export type AccessTokenUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AccessTokenCreateWithoutUserInput, Prisma.AccessTokenUncheckedCreateWithoutUserInput> | Prisma.AccessTokenCreateWithoutUserInput[] | Prisma.AccessTokenUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AccessTokenCreateOrConnectWithoutUserInput | Prisma.AccessTokenCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AccessTokenUpsertWithWhereUniqueWithoutUserInput | Prisma.AccessTokenUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AccessTokenCreateManyUserInputEnvelope
  set?: Prisma.AccessTokenWhereUniqueInput | Prisma.AccessTokenWhereUniqueInput[]
  disconnect?: Prisma.AccessTokenWhereUniqueInput | Prisma.AccessTokenWhereUniqueInput[]
  delete?: Prisma.AccessTokenWhereUniqueInput | Prisma.AccessTokenWhereUniqueInput[]
  connect?: Prisma.AccessTokenWhereUniqueInput | Prisma.AccessTokenWhereUniqueInput[]
  update?: Prisma.AccessTokenUpdateWithWhereUniqueWithoutUserInput | Prisma.AccessTokenUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AccessTokenUpdateManyWithWhereWithoutUserInput | Prisma.AccessTokenUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AccessTokenScalarWhereInput | Prisma.AccessTokenScalarWhereInput[]
}

export type AccessTokenUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AccessTokenCreateWithoutUserInput, Prisma.AccessTokenUncheckedCreateWithoutUserInput> | Prisma.AccessTokenCreateWithoutUserInput[] | Prisma.AccessTokenUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AccessTokenCreateOrConnectWithoutUserInput | Prisma.AccessTokenCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AccessTokenUpsertWithWhereUniqueWithoutUserInput | Prisma.AccessTokenUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AccessTokenCreateManyUserInputEnvelope
  set?: Prisma.AccessTokenWhereUniqueInput | Prisma.AccessTokenWhereUniqueInput[]
  disconnect?: Prisma.AccessTokenWhereUniqueInput | Prisma.AccessTokenWhereUniqueInput[]
  delete?: Prisma.AccessTokenWhereUniqueInput | Prisma.AccessTokenWhereUniqueInput[]
  connect?: Prisma.AccessTokenWhereUniqueInput | Prisma.AccessTokenWhereUniqueInput[]
  update?: Prisma.AccessTokenUpdateWithWhereUniqueWithoutUserInput | Prisma.AccessTokenUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AccessTokenUpdateManyWithWhereWithoutUserInput | Prisma.AccessTokenUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AccessTokenScalarWhereInput | Prisma.AccessTokenScalarWhereInput[]
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type AccessTokenCreateWithoutUserInput = {
  id?: string
  hash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  expiresAt?: Date | string | null
  lastUsedAt?: Date | string | null
}

export type AccessTokenUncheckedCreateWithoutUserInput = {
  id?: string
  hash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  expiresAt?: Date | string | null
  lastUsedAt?: Date | string | null
}

export type AccessTokenCreateOrConnectWithoutUserInput = {
  where: Prisma.AccessTokenWhereUniqueInput
  create: Prisma.XOR<Prisma.AccessTokenCreateWithoutUserInput, Prisma.AccessTokenUncheckedCreateWithoutUserInput>
}

export type AccessTokenCreateManyUserInputEnvelope = {
  data: Prisma.AccessTokenCreateManyUserInput | Prisma.AccessTokenCreateManyUserInput[]
}

export type AccessTokenUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AccessTokenWhereUniqueInput
  update: Prisma.XOR<Prisma.AccessTokenUpdateWithoutUserInput, Prisma.AccessTokenUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.AccessTokenCreateWithoutUserInput, Prisma.AccessTokenUncheckedCreateWithoutUserInput>
}

export type AccessTokenUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AccessTokenWhereUniqueInput
  data: Prisma.XOR<Prisma.AccessTokenUpdateWithoutUserInput, Prisma.AccessTokenUncheckedUpdateWithoutUserInput>
}

export type AccessTokenUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AccessTokenScalarWhereInput
  data: Prisma.XOR<Prisma.AccessTokenUpdateManyMutationInput, Prisma.AccessTokenUncheckedUpdateManyWithoutUserInput>
}

export type AccessTokenScalarWhereInput = {
  AND?: Prisma.AccessTokenScalarWhereInput | Prisma.AccessTokenScalarWhereInput[]
  OR?: Prisma.AccessTokenScalarWhereInput[]
  NOT?: Prisma.AccessTokenScalarWhereInput | Prisma.AccessTokenScalarWhereInput[]
  id?: Prisma.StringFilter<"AccessToken"> | string
  userId?: Prisma.StringFilter<"AccessToken"> | string
  hash?: Prisma.StringFilter<"AccessToken"> | string
  createdAt?: Prisma.DateTimeFilter<"AccessToken"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AccessToken"> | Date | string
  expiresAt?: Prisma.DateTimeNullableFilter<"AccessToken"> | Date | string | null
  lastUsedAt?: Prisma.DateTimeNullableFilter<"AccessToken"> | Date | string | null
}

export type AccessTokenCreateManyUserInput = {
  id?: string
  hash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  expiresAt?: Date | string | null
  lastUsedAt?: Date | string | null
}

export type AccessTokenUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  lastUsedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AccessTokenUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  lastUsedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AccessTokenUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  lastUsedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type AccessTokenSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  hash?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  expiresAt?: boolean
  lastUsedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["accessToken"]>

export type AccessTokenSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  hash?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  expiresAt?: boolean
  lastUsedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["accessToken"]>

export type AccessTokenSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  hash?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  expiresAt?: boolean
  lastUsedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["accessToken"]>

export type AccessTokenSelectScalar = {
  id?: boolean
  userId?: boolean
  hash?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  expiresAt?: boolean
  lastUsedAt?: boolean
}

export type AccessTokenOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "hash" | "createdAt" | "updatedAt" | "expiresAt" | "lastUsedAt", ExtArgs["result"]["accessToken"]>
export type AccessTokenInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AccessTokenIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AccessTokenIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $AccessTokenPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AccessToken"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    hash: string
    createdAt: Date
    updatedAt: Date
    expiresAt: Date | null
    lastUsedAt: Date | null
  }, ExtArgs["result"]["accessToken"]>
  composites: {}
}

export type AccessTokenGetPayload<S extends boolean | null | undefined | AccessTokenDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AccessTokenPayload, S>

export type AccessTokenCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AccessTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AccessTokenCountAggregateInputType | true
  }

export interface AccessTokenDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccessToken'], meta: { name: 'AccessToken' } }
  /**
   * Find zero or one AccessToken that matches the filter.
   * @param {AccessTokenFindUniqueArgs} args - Arguments to find a AccessToken
   * @example
   * // Get one AccessToken
   * const accessToken = await prisma.accessToken.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AccessTokenFindUniqueArgs>(args: Prisma.SelectSubset<T, AccessTokenFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AccessTokenClient<runtime.Types.Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AccessToken that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AccessTokenFindUniqueOrThrowArgs} args - Arguments to find a AccessToken
   * @example
   * // Get one AccessToken
   * const accessToken = await prisma.accessToken.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AccessTokenFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AccessTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AccessTokenClient<runtime.Types.Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AccessToken that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessTokenFindFirstArgs} args - Arguments to find a AccessToken
   * @example
   * // Get one AccessToken
   * const accessToken = await prisma.accessToken.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AccessTokenFindFirstArgs>(args?: Prisma.SelectSubset<T, AccessTokenFindFirstArgs<ExtArgs>>): Prisma.Prisma__AccessTokenClient<runtime.Types.Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AccessToken that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessTokenFindFirstOrThrowArgs} args - Arguments to find a AccessToken
   * @example
   * // Get one AccessToken
   * const accessToken = await prisma.accessToken.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AccessTokenFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AccessTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AccessTokenClient<runtime.Types.Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AccessTokens that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessTokenFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AccessTokens
   * const accessTokens = await prisma.accessToken.findMany()
   * 
   * // Get first 10 AccessTokens
   * const accessTokens = await prisma.accessToken.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const accessTokenWithIdOnly = await prisma.accessToken.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AccessTokenFindManyArgs>(args?: Prisma.SelectSubset<T, AccessTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AccessToken.
   * @param {AccessTokenCreateArgs} args - Arguments to create a AccessToken.
   * @example
   * // Create one AccessToken
   * const AccessToken = await prisma.accessToken.create({
   *   data: {
   *     // ... data to create a AccessToken
   *   }
   * })
   * 
   */
  create<T extends AccessTokenCreateArgs>(args: Prisma.SelectSubset<T, AccessTokenCreateArgs<ExtArgs>>): Prisma.Prisma__AccessTokenClient<runtime.Types.Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AccessTokens.
   * @param {AccessTokenCreateManyArgs} args - Arguments to create many AccessTokens.
   * @example
   * // Create many AccessTokens
   * const accessToken = await prisma.accessToken.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AccessTokenCreateManyArgs>(args?: Prisma.SelectSubset<T, AccessTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AccessTokens and returns the data saved in the database.
   * @param {AccessTokenCreateManyAndReturnArgs} args - Arguments to create many AccessTokens.
   * @example
   * // Create many AccessTokens
   * const accessToken = await prisma.accessToken.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AccessTokens and only return the `id`
   * const accessTokenWithIdOnly = await prisma.accessToken.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AccessTokenCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AccessTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AccessToken.
   * @param {AccessTokenDeleteArgs} args - Arguments to delete one AccessToken.
   * @example
   * // Delete one AccessToken
   * const AccessToken = await prisma.accessToken.delete({
   *   where: {
   *     // ... filter to delete one AccessToken
   *   }
   * })
   * 
   */
  delete<T extends AccessTokenDeleteArgs>(args: Prisma.SelectSubset<T, AccessTokenDeleteArgs<ExtArgs>>): Prisma.Prisma__AccessTokenClient<runtime.Types.Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AccessToken.
   * @param {AccessTokenUpdateArgs} args - Arguments to update one AccessToken.
   * @example
   * // Update one AccessToken
   * const accessToken = await prisma.accessToken.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AccessTokenUpdateArgs>(args: Prisma.SelectSubset<T, AccessTokenUpdateArgs<ExtArgs>>): Prisma.Prisma__AccessTokenClient<runtime.Types.Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AccessTokens.
   * @param {AccessTokenDeleteManyArgs} args - Arguments to filter AccessTokens to delete.
   * @example
   * // Delete a few AccessTokens
   * const { count } = await prisma.accessToken.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AccessTokenDeleteManyArgs>(args?: Prisma.SelectSubset<T, AccessTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AccessTokens.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessTokenUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AccessTokens
   * const accessToken = await prisma.accessToken.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AccessTokenUpdateManyArgs>(args: Prisma.SelectSubset<T, AccessTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AccessTokens and returns the data updated in the database.
   * @param {AccessTokenUpdateManyAndReturnArgs} args - Arguments to update many AccessTokens.
   * @example
   * // Update many AccessTokens
   * const accessToken = await prisma.accessToken.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AccessTokens and only return the `id`
   * const accessTokenWithIdOnly = await prisma.accessToken.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AccessTokenUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AccessTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AccessToken.
   * @param {AccessTokenUpsertArgs} args - Arguments to update or create a AccessToken.
   * @example
   * // Update or create a AccessToken
   * const accessToken = await prisma.accessToken.upsert({
   *   create: {
   *     // ... data to create a AccessToken
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AccessToken we want to update
   *   }
   * })
   */
  upsert<T extends AccessTokenUpsertArgs>(args: Prisma.SelectSubset<T, AccessTokenUpsertArgs<ExtArgs>>): Prisma.Prisma__AccessTokenClient<runtime.Types.Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AccessTokens.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessTokenCountArgs} args - Arguments to filter AccessTokens to count.
   * @example
   * // Count the number of AccessTokens
   * const count = await prisma.accessToken.count({
   *   where: {
   *     // ... the filter for the AccessTokens we want to count
   *   }
   * })
  **/
  count<T extends AccessTokenCountArgs>(
    args?: Prisma.Subset<T, AccessTokenCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AccessTokenCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AccessToken.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AccessTokenAggregateArgs>(args: Prisma.Subset<T, AccessTokenAggregateArgs>): Prisma.PrismaPromise<GetAccessTokenAggregateType<T>>

  /**
   * Group by AccessToken.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessTokenGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AccessTokenGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AccessTokenGroupByArgs['orderBy'] }
      : { orderBy?: AccessTokenGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AccessTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccessTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AccessToken model
 */
readonly fields: AccessTokenFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AccessToken.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AccessTokenClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AccessToken model
 */
export interface AccessTokenFieldRefs {
  readonly id: Prisma.FieldRef<"AccessToken", 'String'>
  readonly userId: Prisma.FieldRef<"AccessToken", 'String'>
  readonly hash: Prisma.FieldRef<"AccessToken", 'String'>
  readonly createdAt: Prisma.FieldRef<"AccessToken", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"AccessToken", 'DateTime'>
  readonly expiresAt: Prisma.FieldRef<"AccessToken", 'DateTime'>
  readonly lastUsedAt: Prisma.FieldRef<"AccessToken", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AccessToken findUnique
 */
export type AccessTokenFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessToken
   */
  select?: Prisma.AccessTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessToken
   */
  omit?: Prisma.AccessTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessTokenInclude<ExtArgs> | null
  /**
   * Filter, which AccessToken to fetch.
   */
  where: Prisma.AccessTokenWhereUniqueInput
}

/**
 * AccessToken findUniqueOrThrow
 */
export type AccessTokenFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessToken
   */
  select?: Prisma.AccessTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessToken
   */
  omit?: Prisma.AccessTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessTokenInclude<ExtArgs> | null
  /**
   * Filter, which AccessToken to fetch.
   */
  where: Prisma.AccessTokenWhereUniqueInput
}

/**
 * AccessToken findFirst
 */
export type AccessTokenFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessToken
   */
  select?: Prisma.AccessTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessToken
   */
  omit?: Prisma.AccessTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessTokenInclude<ExtArgs> | null
  /**
   * Filter, which AccessToken to fetch.
   */
  where?: Prisma.AccessTokenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccessTokens to fetch.
   */
  orderBy?: Prisma.AccessTokenOrderByWithRelationInput | Prisma.AccessTokenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AccessTokens.
   */
  cursor?: Prisma.AccessTokenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccessTokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccessTokens.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AccessTokens.
   */
  distinct?: Prisma.AccessTokenScalarFieldEnum | Prisma.AccessTokenScalarFieldEnum[]
}

/**
 * AccessToken findFirstOrThrow
 */
export type AccessTokenFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessToken
   */
  select?: Prisma.AccessTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessToken
   */
  omit?: Prisma.AccessTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessTokenInclude<ExtArgs> | null
  /**
   * Filter, which AccessToken to fetch.
   */
  where?: Prisma.AccessTokenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccessTokens to fetch.
   */
  orderBy?: Prisma.AccessTokenOrderByWithRelationInput | Prisma.AccessTokenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AccessTokens.
   */
  cursor?: Prisma.AccessTokenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccessTokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccessTokens.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AccessTokens.
   */
  distinct?: Prisma.AccessTokenScalarFieldEnum | Prisma.AccessTokenScalarFieldEnum[]
}

/**
 * AccessToken findMany
 */
export type AccessTokenFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessToken
   */
  select?: Prisma.AccessTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessToken
   */
  omit?: Prisma.AccessTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessTokenInclude<ExtArgs> | null
  /**
   * Filter, which AccessTokens to fetch.
   */
  where?: Prisma.AccessTokenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccessTokens to fetch.
   */
  orderBy?: Prisma.AccessTokenOrderByWithRelationInput | Prisma.AccessTokenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AccessTokens.
   */
  cursor?: Prisma.AccessTokenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccessTokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccessTokens.
   */
  skip?: number
  distinct?: Prisma.AccessTokenScalarFieldEnum | Prisma.AccessTokenScalarFieldEnum[]
}

/**
 * AccessToken create
 */
export type AccessTokenCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessToken
   */
  select?: Prisma.AccessTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessToken
   */
  omit?: Prisma.AccessTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessTokenInclude<ExtArgs> | null
  /**
   * The data needed to create a AccessToken.
   */
  data: Prisma.XOR<Prisma.AccessTokenCreateInput, Prisma.AccessTokenUncheckedCreateInput>
}

/**
 * AccessToken createMany
 */
export type AccessTokenCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AccessTokens.
   */
  data: Prisma.AccessTokenCreateManyInput | Prisma.AccessTokenCreateManyInput[]
}

/**
 * AccessToken createManyAndReturn
 */
export type AccessTokenCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessToken
   */
  select?: Prisma.AccessTokenSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AccessToken
   */
  omit?: Prisma.AccessTokenOmit<ExtArgs> | null
  /**
   * The data used to create many AccessTokens.
   */
  data: Prisma.AccessTokenCreateManyInput | Prisma.AccessTokenCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessTokenIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AccessToken update
 */
export type AccessTokenUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessToken
   */
  select?: Prisma.AccessTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessToken
   */
  omit?: Prisma.AccessTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessTokenInclude<ExtArgs> | null
  /**
   * The data needed to update a AccessToken.
   */
  data: Prisma.XOR<Prisma.AccessTokenUpdateInput, Prisma.AccessTokenUncheckedUpdateInput>
  /**
   * Choose, which AccessToken to update.
   */
  where: Prisma.AccessTokenWhereUniqueInput
}

/**
 * AccessToken updateMany
 */
export type AccessTokenUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AccessTokens.
   */
  data: Prisma.XOR<Prisma.AccessTokenUpdateManyMutationInput, Prisma.AccessTokenUncheckedUpdateManyInput>
  /**
   * Filter which AccessTokens to update
   */
  where?: Prisma.AccessTokenWhereInput
  /**
   * Limit how many AccessTokens to update.
   */
  limit?: number
}

/**
 * AccessToken updateManyAndReturn
 */
export type AccessTokenUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessToken
   */
  select?: Prisma.AccessTokenSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AccessToken
   */
  omit?: Prisma.AccessTokenOmit<ExtArgs> | null
  /**
   * The data used to update AccessTokens.
   */
  data: Prisma.XOR<Prisma.AccessTokenUpdateManyMutationInput, Prisma.AccessTokenUncheckedUpdateManyInput>
  /**
   * Filter which AccessTokens to update
   */
  where?: Prisma.AccessTokenWhereInput
  /**
   * Limit how many AccessTokens to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessTokenIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AccessToken upsert
 */
export type AccessTokenUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessToken
   */
  select?: Prisma.AccessTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessToken
   */
  omit?: Prisma.AccessTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessTokenInclude<ExtArgs> | null
  /**
   * The filter to search for the AccessToken to update in case it exists.
   */
  where: Prisma.AccessTokenWhereUniqueInput
  /**
   * In case the AccessToken found by the `where` argument doesn't exist, create a new AccessToken with this data.
   */
  create: Prisma.XOR<Prisma.AccessTokenCreateInput, Prisma.AccessTokenUncheckedCreateInput>
  /**
   * In case the AccessToken was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AccessTokenUpdateInput, Prisma.AccessTokenUncheckedUpdateInput>
}

/**
 * AccessToken delete
 */
export type AccessTokenDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessToken
   */
  select?: Prisma.AccessTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessToken
   */
  omit?: Prisma.AccessTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessTokenInclude<ExtArgs> | null
  /**
   * Filter which AccessToken to delete.
   */
  where: Prisma.AccessTokenWhereUniqueInput
}

/**
 * AccessToken deleteMany
 */
export type AccessTokenDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AccessTokens to delete
   */
  where?: Prisma.AccessTokenWhereInput
  /**
   * Limit how many AccessTokens to delete.
   */
  limit?: number
}

/**
 * AccessToken without action
 */
export type AccessTokenDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessToken
   */
  select?: Prisma.AccessTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessToken
   */
  omit?: Prisma.AccessTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessTokenInclude<ExtArgs> | null
}
